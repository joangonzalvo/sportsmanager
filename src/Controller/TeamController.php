<?php

namespace App\Controller;

use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use App\Entity\Team;
use App\Form\TeamType;
use App\Form\JoinType;

class TeamController extends Controller
{
    
    /**
     * @Route("/teams",name="teams")
     */
    public function allteams($name='demo'){
        $teams = $this->getDoctrine()->getRepository('App:Team')->findAll();
        $users = $this->getDoctrine()->getRepository('App:User')->findAll();
        $leagues = $this->getDoctrine()->getRepository('App:League')->findAll();
        
        return $this->render('team/allteams.html.twig',[
            'teams' => $teams,
            'users' => $users,
            'leagues' => $leagues,
            'name'=> $name]);
    }
    
    /**
     * @Route("/jointeam", name="jointeam")
     */
    public function joinTeam(Request $request)
    {
        $teams = $this->getDoctrine()->getRepository('App:Team')->findAll();
        $users = $this->getDoctrine()->getRepository('App:User')->findAll();
        $leagues = $this->getDoctrine()->getRepository('App:League')->findAll();
        $name='demo';
        
        $team = new Team();
        
        $form = $this->createForm(JoinType::class, $team);
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
           $team=$form->getData();
           $thiskey=$team->getTeamkey();
           
           $repository = $this->getDoctrine()->getRepository('App:Team');
           $thisTeam = $repository->findOneBy(['teamkey' => $thiskey]);
           if (!$thisTeam) {
                throw $this->createNotFoundException(
                    'No team found for key '.$thiskey
                );
            }else{
                //Every time someone joins the team, it will gain one point of value.
                $myValue=$thisTeam->getTeamValue();
                $myValue=$myValue+1;
                $thisTeam->setTeamValue($myValue);
                
                $em = $this->getDoctrine()->getManager();
                $em->persist($thisTeam);
                $em->flush();
                
                $user=$this->getUser();
                $user->setTeam($thisTeam);
                $user->setTeamRole("Team_Member");
                $bm = $this->getDoctrine()->getManager();
                $bm->persist($user);
                $bm->flush();

            }
            return $this->redirectToRoute('homeaction');
       }
       //rendering form
        return $this->render('team/jointeam.html.twig', array(
            'form' => $form->createView(),
            'teams' => $teams,
            'users' => $users,
            'leagues' => $leagues,
            'name'=> $name
        ));
        
    }
    /**
    * @return string
    */
    private function generateUniqueFileName()
    {
    // md5() reduces the similarity of the file names generated by
    // uniqid(), which is based on timestamps
    return md5(uniqid());
    }

    /**
     * @Route("/createteam", name="createteam")
     */
    public function createTeam(Request $request)
    {
        $teams = $this->getDoctrine()->getRepository('App:Team')->findAll();
        $users = $this->getDoctrine()->getRepository('App:User')->findAll();
        $leagues = $this->getDoctrine()->getRepository('App:League')->findAll();
        $name='demo';
        
        $team = new Team();
        $team->setLeagueTitles(0);
        $team->setOtherTitles(0);
        //Team value default
        $team->setTeamValue(50);

        $form = $this->createForm(TeamType::class, $team);
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
           $team=$form->getData();
           //TEAMKEY
           $mycode="t";
           $rand1=rand(100,999);
           $mycode=$mycode."$rand1"."m".substr($team->getTeamname(),0,3)."c";
           $rand2=rand(10,99);
           $mycode=$mycode."$rand2";
           $team->setTeamkey($mycode);
           //LOGO
            //upload file
            $file=$team->getLogo();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            // moves the file to the directory where brochures are stored
            $file->move(
                    $this->getParameter('pictures_directory'),
                    $fileName
            );
            $team->setLogo($fileName);
            
           $em = $this->getDoctrine()->getManager();
           $em->persist($team);
           $em->flush();
           
           $user=$this->getUser();
           $user->setTeam($team);
           $user->setTeamRole("Team_Owner");
           $bm = $this->getDoctrine()->getManager();
           $bm->persist($user);
           $bm->flush();
           
           return $this->redirectToRoute('homeaction');
       }
       //rendering form
        return $this->render('team/newteam.html.twig', array(
            'form' => $form->createView(),
            'teams' => $teams,
            'users' => $users,
            'leagues' => $leagues,
            'name'=> $name
        ));
    }
    /**
     * @Route("/editteam",name="editteam")
     */
    public function editTeam(Request $request)
    {
        $leagues = $this->getDoctrine()->getRepository('App:League')->findAll();
        $teams = $this->getDoctrine()->getRepository('App:Team')->findAll();
            //this user
        $user=$this->getUser();
        foreach($teams as $team) {
            if($team == $user->getTeamid()){
                    $thisteam=$team;
                    }
                }
        $team = new Team();
        //creating the form
        $form = $this->createForm(TeamType::class, $team);
        
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
           $team=$form->getData();
           //LOGO
            //upload file
            $file=$team->getLogo();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            // moves the file to the directory where brochures are stored
            $file->move(
                    $this->getParameter('pictures_directory'),
                    $fileName
            );
            $team->setLogo($fileName);
            //Update this team:
            $thisteam->setTeamname($team->getTeamname());
            $thisteam->setLogo($team->getLogo());
            
           $em = $this->getDoctrine()->getManager();
           $em->persist($thisteam);
           $em->flush();
           
           return $this->redirectToRoute('homeaction');
       }
        //rendering form
        return $this->render('team/editteam.html.twig', array(
            'form' => $form->createView(),
            'leagues' => $leagues
        ));
         
    }
    /**
     * @Route("/leaveteam",name="leaveteam")
     */
    public function leaveTeam(Request $request){
       $user=$this->getUser();
       $edited=0;
       if($user->getTeamRole()=="Team_Owner"){
               $flag=0;
               $teams = $this->getDoctrine()->getRepository('App:Team')->findAll();
               $users = $this->getDoctrine()->getRepository('App:User')->findAll();
               foreach ($teams as $team) {
                    if($team == $user->getTeamid()){
                        foreach($users as $thisuser){
                            if($thisuser->getTeamid()==$team && $thisuser->getTeamRole() != "Team_Owner"){
                                if($flag==0){
                                    $flag=1;
                                    $thisuser->setTeamRole("Team_Owner");
                                    $entityManager = $this->getDoctrine()->getManager();
                                    $entityManager->persist($user);
                                    $entityManager->flush();
                                }
                            }
                        }
                        if($flag==0){//Means there is no more members in the team to get the owner, team will be auto deleted
                        //First we need to delete the team from all the classifications
                        $cs = $this->getDoctrine()->getRepository('App:Classification')->findAll();
                        foreach($cs as $c){
                            if($c->getTeam()==$team){
                                $entityManager = $this->getDoctrine()->getManager();
                                $entityManager->remove($c);
                                $entityManager->flush();
                            }
                        }
                        //EDIT USER TO LEAVE TEAM
                        $user->setTeamRole("none");
                        $user->setTeam(null);
                        $entityManager2 = $this->getDoctrine()->getManager();
                        $entityManager2->persist($user);
                        $entityManager2->flush();
                        $edited=1;
                        
                        //DELETE TEAME BCS THERE ARE NO MORE MEMBERS IN
                        $entityManager3 = $this->getDoctrine()->getManager();
                        $entityManager3->remove($team);
                        $entityManager3->flush();
                        }
                    }
                }
            }
            if($edited==0){
                //EDIT USER TO LEAVE TEAM
                $user->setTeamRole("none");
                $user->setTeam(null);
                $entityManager2 = $this->getDoctrine()->getManager();
                $entityManager2->persist($user);
                $entityManager2->flush();
            }
        
       return $this->redirectToRoute('homeaction');
    }
    
    
    
}//ENDCONTROLLER
